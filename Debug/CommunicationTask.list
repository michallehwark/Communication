
CommunicationTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c98  08002c98  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002c98  08002c98  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c98  08002c98  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000088  08002d2c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002d2c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093cc  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffc  00000000  00000000  0002947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c21  00000000  00000000  0002c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000996a  00000000  00000000  00046019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845d4  00000000  00000000  0004f983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d8  00000000  00000000  000d3fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c58 	.word	0x08002c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002c58 	.word	0x08002c58

0800014c <_ZN5CRC3217build_crc32_tableEv>:
        }
    }
    return ~crc;
}

void CRC32::build_crc32_table(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    crc32_table = new uint32_t[CRC32_TABLE_SIZE];
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	881b      	ldrh	r3, [r3, #0]
 8000158:	009b      	lsls	r3, r3, #2
 800015a:	4618      	mov	r0, r3
 800015c:	f002 fc73 	bl	8002a46 <_Znaj>
 8000160:	4603      	mov	r3, r0
 8000162:	461a      	mov	r2, r3
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	605a      	str	r2, [r3, #4]

    for (uint32_t i = 0; i < CRC32_TABLE_SIZE; i++) {
 8000168:	2300      	movs	r3, #0
 800016a:	61fb      	str	r3, [r7, #28]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	881b      	ldrh	r3, [r3, #0]
 8000170:	461a      	mov	r2, r3
 8000172:	69fb      	ldr	r3, [r7, #28]
 8000174:	4293      	cmp	r3, r2
 8000176:	d22b      	bcs.n	80001d0 <_ZN5CRC3217build_crc32_tableEv+0x84>
        uint32_t ch = i;
 8000178:	69fb      	ldr	r3, [r7, #28]
 800017a:	61bb      	str	r3, [r7, #24]
        uint32_t crc = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	617b      	str	r3, [r7, #20]
        for (size_t j = 0; j < 8; j++) {
 8000180:	2300      	movs	r3, #0
 8000182:	613b      	str	r3, [r7, #16]
 8000184:	693b      	ldr	r3, [r7, #16]
 8000186:	2b07      	cmp	r3, #7
 8000188:	d817      	bhi.n	80001ba <_ZN5CRC3217build_crc32_tableEv+0x6e>
            uint32_t b = (ch ^ crc) & 1;
 800018a:	69ba      	ldr	r2, [r7, #24]
 800018c:	697b      	ldr	r3, [r7, #20]
 800018e:	4053      	eors	r3, r2
 8000190:	f003 0301 	and.w	r3, r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
            crc >>= 1;
 8000196:	697b      	ldr	r3, [r7, #20]
 8000198:	085b      	lsrs	r3, r3, #1
 800019a:	617b      	str	r3, [r7, #20]
            if (b)
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d004      	beq.n	80001ac <_ZN5CRC3217build_crc32_tableEv+0x60>
                crc = crc ^ divisor;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	68db      	ldr	r3, [r3, #12]
 80001a6:	697a      	ldr	r2, [r7, #20]
 80001a8:	4053      	eors	r3, r2
 80001aa:	617b      	str	r3, [r7, #20]
            ch >>= 1;
 80001ac:	69bb      	ldr	r3, [r7, #24]
 80001ae:	085b      	lsrs	r3, r3, #1
 80001b0:	61bb      	str	r3, [r7, #24]
        for (size_t j = 0; j < 8; j++) {
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	3301      	adds	r3, #1
 80001b6:	613b      	str	r3, [r7, #16]
 80001b8:	e7e4      	b.n	8000184 <_ZN5CRC3217build_crc32_tableEv+0x38>
        }
        crc32_table[i] = crc;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	685a      	ldr	r2, [r3, #4]
 80001be:	69fb      	ldr	r3, [r7, #28]
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	4413      	add	r3, r2
 80001c4:	697a      	ldr	r2, [r7, #20]
 80001c6:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < CRC32_TABLE_SIZE; i++) {
 80001c8:	69fb      	ldr	r3, [r7, #28]
 80001ca:	3301      	adds	r3, #1
 80001cc:	61fb      	str	r3, [r7, #28]
 80001ce:	e7cd      	b.n	800016c <_ZN5CRC3217build_crc32_tableEv+0x20>
    }
}
 80001d0:	bf00      	nop
 80001d2:	3720      	adds	r7, #32
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <_ZN5CRC32C1ENS_8crc_modeE>:
        crc = (crc >> 8) ^ crc32_table[t];
    }
    return ~crc;
}

CRC32::CRC32(crc_mode mode) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ea:	801a      	strh	r2, [r3, #0]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <_ZN5CRC32C1ENS_8crc_modeE+0x44>)
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	689a      	ldr	r2, [r3, #8]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2200      	movs	r2, #0
 80001fe:	741a      	strb	r2, [r3, #16]
    this->mode = mode;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78fa      	ldrb	r2, [r7, #3]
 8000204:	741a      	strb	r2, [r3, #16]
    if (mode == FAST) {
 8000206:	78fb      	ldrb	r3, [r7, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d102      	bne.n	8000212 <_ZN5CRC32C1ENS_8crc_modeE+0x3a>
        build_crc32_table();
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f7ff ff9d 	bl	800014c <_ZN5CRC3217build_crc32_tableEv>
    }
}
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	edb88320 	.word	0xedb88320

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_DMA_Init+0x68>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <MX_DMA_Init+0x68>)
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <MX_DMA_Init+0x68>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200e      	movs	r0, #14
 8000244:	f000 fd47 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000248:	200e      	movs	r0, #14
 800024a:	f000 fd60 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	200f      	movs	r0, #15
 8000254:	f000 fd3f 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000258:	200f      	movs	r0, #15
 800025a:	f000 fd58 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	2010      	movs	r0, #16
 8000264:	f000 fd37 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000268:	2010      	movs	r0, #16
 800026a:	f000 fd50 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2100      	movs	r1, #0
 8000272:	2011      	movs	r0, #17
 8000274:	f000 fd2f 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000278:	2011      	movs	r0, #17
 800027a:	f000 fd48 	bl	8000d0e <HAL_NVIC_EnableIRQ>

}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000

0800028c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a0:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0310 	and.w	r3, r3, #16
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a26      	ldr	r2, [pc, #152]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0320 	and.w	r3, r3, #32
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	603b      	str	r3, [r7, #0]
 80002fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2120      	movs	r1, #32
 8000304:	4815      	ldr	r0, [pc, #84]	; (800035c <MX_GPIO_Init+0xd0>)
 8000306:	f001 f93f 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800030a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MX_GPIO_Init+0xd4>)
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	4811      	ldr	r0, [pc, #68]	; (8000364 <MX_GPIO_Init+0xd8>)
 8000320:	f000 ffae 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000324:	2320      	movs	r3, #32
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <MX_GPIO_Init+0xd0>)
 800033c:	f000 ffa0 	bl	8001280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	2028      	movs	r0, #40	; 0x28
 8000346:	f000 fcc6 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034a:	2028      	movs	r0, #40	; 0x28
 800034c:	f000 fcdf 	bl	8000d0e <HAL_NVIC_EnableIRQ>

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800
 8000360:	10210000 	.word	0x10210000
 8000364:	40011000 	.word	0x40011000

08000368 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// to talk to UART Tera Term --baudrate 19200
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)		//handler for the end of transmission, this is called when the transmission ends
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	//uint32_t crc_tx = crc32->getCRC32(txdata, DATA_SIZE);

	//memcpy(&txdata[4], &crc_tx, sizeof(crc_tx));

	HAL_UART_Transmit_DMA(&huart2, txdata, sizeof(txdata));
 8000370:	2209      	movs	r2, #9
 8000372:	4904      	ldr	r1, [pc, #16]	; (8000384 <HAL_UART_TxCpltCallback+0x1c>)
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <HAL_UART_TxCpltCallback+0x20>)
 8000376:	f001 fda9 	bl	8001ecc <HAL_UART_Transmit_DMA>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000000c 	.word	0x2000000c
 8000388:	2000020c 	.word	0x2000020c

0800038c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)	//handler for the end of reception, this is called when the reception ends
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart2, rxdata, sizeof(rxdata));
 8000394:	2209      	movs	r2, #9
 8000396:	4904      	ldr	r1, [pc, #16]	; (80003a8 <HAL_UART_RxCpltCallback+0x1c>)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <HAL_UART_RxCpltCallback+0x20>)
 800039a:	f001 fe03 	bl	8001fa4 <HAL_UART_Receive_DMA>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	2000020c 	.word	0x2000020c

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();  //uint8_t suma = sizeof(rxdata);
 80003b4:	f000 fb56 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f81a 	bl	80003f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f7ff ff66 	bl	800028c <MX_GPIO_Init>
  MX_DMA_Init();
 80003c0:	f7ff ff2e 	bl	8000220 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003c4:	f000 f986 	bl	80006d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003c8:	f000 f9ae 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit_DMA(&huart2, txdata, sizeof(txdata));
 80003cc:	2209      	movs	r2, #9
 80003ce:	4905      	ldr	r1, [pc, #20]	; (80003e4 <main+0x34>)
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <main+0x38>)
 80003d2:	f001 fd7b 	bl	8001ecc <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart2, rxdata, sizeof(rxdata));
 80003d6:	2209      	movs	r2, #9
 80003d8:	4904      	ldr	r1, [pc, #16]	; (80003ec <main+0x3c>)
 80003da:	4803      	ldr	r0, [pc, #12]	; (80003e8 <main+0x38>)
 80003dc:	f001 fde2 	bl	8001fa4 <HAL_UART_Receive_DMA>
//  std::cout << std::hex << crc_value << std::endl;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <main+0x30>
 80003e2:	bf00      	nop
 80003e4:	2000000c 	.word	0x2000000c
 80003e8:	2000020c 	.word	0x2000020c
 80003ec:	20000000 	.word	0x20000000

080003f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b090      	sub	sp, #64	; 0x40
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fb66 	bl	8002ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000412:	2302      	movs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	2310      	movs	r3, #16
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000422:	2300      	movs	r3, #0
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000426:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800042a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4618      	mov	r0, r3
 8000432:	f001 f8e3 	bl	80015fc <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	bf14      	ite	ne
 800043c:	2301      	movne	r3, #1
 800043e:	2300      	moveq	r3, #0
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000446:	f000 f81e 	bl	8000486 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2302      	movs	r3, #2
 8000450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2102      	movs	r1, #2
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fb49 	bl	8001afc <HAL_RCC_ClockConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf14      	ite	ne
 8000470:	2301      	movne	r3, #1
 8000472:	2300      	moveq	r3, #0
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800047a:	f000 f804 	bl	8000486 <Error_Handler>
  }
}
 800047e:	bf00      	nop
 8000480:	3740      	adds	r7, #64	; 0x40
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048a:	b672      	cpsid	i
}
 800048c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048e:	e7fe      	b.n	800048e <Error_Handler+0x8>

08000490 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d10f      	bne.n	80004c0 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d10a      	bne.n	80004c0 <_Z41__static_initialization_and_destruction_0ii+0x30>
CRC32 *crc32 = new CRC32(CRC32::FAST);
 80004aa:	2014      	movs	r0, #20
 80004ac:	f002 faba 	bl	8002a24 <_Znwj>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461c      	mov	r4, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	4620      	mov	r0, r4
 80004b8:	f7ff fe8e 	bl	80001d8 <_ZN5CRC32C1ENS_8crc_modeE>
 80004bc:	4b02      	ldr	r3, [pc, #8]	; (80004c8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80004be:	601c      	str	r4, [r3, #0]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd90      	pop	{r4, r7, pc}
 80004c8:	200000a4 	.word	0x200000a4

080004cc <_GLOBAL__sub_I_rxdata>:
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff ffdb 	bl	8000490 <_Z41__static_initialization_and_destruction_0ii>
 80004da:	bd80      	pop	{r7, pc}

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler+0x4>

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler+0x4>

08000552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <UsageFault_Handler+0x4>

0800055e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f000 fab3 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <DMA1_Channel4_IRQHandler+0x10>)
 8000596:	f000 fd3f 	bl	8001018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000fc 	.word	0x200000fc

080005a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <DMA1_Channel5_IRQHandler+0x10>)
 80005aa:	f000 fd35 	bl	8001018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000140 	.word	0x20000140

080005b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <DMA1_Channel6_IRQHandler+0x10>)
 80005be:	f000 fd2b 	bl	8001018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000b8 	.word	0x200000b8

080005cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <DMA1_Channel7_IRQHandler+0x10>)
 80005d2:	f000 fd21 	bl	8001018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000184 	.word	0x20000184

080005e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <USART1_IRQHandler+0x10>)
 80005e6:	f001 fd0d 	bl	8002004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200001c8 	.word	0x200001c8

080005f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <USART2_IRQHandler+0x10>)
 80005fa:	f001 fd03 	bl	8002004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000020c 	.word	0x2000020c

08000608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800060c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000610:	f000 ffd2 	bl	80015b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	return 1;
 800061c:	2301      	movs	r3, #1
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <_kill>:

int _kill(int pid, int sig)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000630:	f002 fa1c 	bl	8002a6c <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	2216      	movs	r2, #22
 8000638:	601a      	str	r2, [r3, #0]
	return -1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_exit>:

void _exit (int status)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800064e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffe7 	bl	8000626 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000658:	e7fe      	b.n	8000658 <_exit+0x12>
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f002 f9ee 	bl	8002a6c <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20005000 	.word	0x20005000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	200000a8 	.word	0x200000a8
 80006c4:	20000268 	.word	0x20000268

080006c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f001 fb90 	bl	8001e30 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f7ff feb6 	bl	8000486 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001c8 	.word	0x200001c8
 8000724:	40013800 	.word	0x40013800

08000728 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f001 fb66 	bl	8001e30 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f7ff fe8c 	bl	8000486 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000020c 	.word	0x2000020c
 8000778:	40004400 	.word	0x40004400

0800077c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a92      	ldr	r2, [pc, #584]	; (80009e0 <HAL_UART_MspInit+0x264>)
 8000798:	4293      	cmp	r3, r2
 800079a:	f040 8093 	bne.w	80008c4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079e:	4b91      	ldr	r3, [pc, #580]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a90      	ldr	r2, [pc, #576]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b8e      	ldr	r3, [pc, #568]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b8b      	ldr	r3, [pc, #556]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a8a      	ldr	r2, [pc, #552]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b88      	ldr	r3, [pc, #544]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4881      	ldr	r0, [pc, #516]	; (80009e8 <HAL_UART_MspInit+0x26c>)
 80007e2:	f000 fd4d 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	487b      	ldr	r0, [pc, #492]	; (80009e8 <HAL_UART_MspInit+0x26c>)
 80007fa:	f000 fd41 	bl	8001280 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80007fe:	4b7b      	ldr	r3, [pc, #492]	; (80009ec <HAL_UART_MspInit+0x270>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000814:	4a75      	ldr	r2, [pc, #468]	; (80009ec <HAL_UART_MspInit+0x270>)
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800081a:	4b75      	ldr	r3, [pc, #468]	; (80009f0 <HAL_UART_MspInit+0x274>)
 800081c:	4a75      	ldr	r2, [pc, #468]	; (80009f4 <HAL_UART_MspInit+0x278>)
 800081e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000820:	4b73      	ldr	r3, [pc, #460]	; (80009f0 <HAL_UART_MspInit+0x274>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <HAL_UART_MspInit+0x274>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800082c:	4b70      	ldr	r3, [pc, #448]	; (80009f0 <HAL_UART_MspInit+0x274>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <HAL_UART_MspInit+0x274>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000838:	4b6d      	ldr	r3, [pc, #436]	; (80009f0 <HAL_UART_MspInit+0x274>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800083e:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <HAL_UART_MspInit+0x274>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000844:	4b6a      	ldr	r3, [pc, #424]	; (80009f0 <HAL_UART_MspInit+0x274>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800084a:	4869      	ldr	r0, [pc, #420]	; (80009f0 <HAL_UART_MspInit+0x274>)
 800084c:	f000 fa7a 	bl	8000d44 <HAL_DMA_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000856:	f7ff fe16 	bl	8000486 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a64      	ldr	r2, [pc, #400]	; (80009f0 <HAL_UART_MspInit+0x274>)
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
 8000860:	4a63      	ldr	r2, [pc, #396]	; (80009f0 <HAL_UART_MspInit+0x274>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000866:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 8000868:	4a64      	ldr	r2, [pc, #400]	; (80009fc <HAL_UART_MspInit+0x280>)
 800086a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800086c:	4b62      	ldr	r3, [pc, #392]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 800086e:	2210      	movs	r2, #16
 8000870:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000878:	4b5f      	ldr	r3, [pc, #380]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800087e:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000884:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000890:	4b59      	ldr	r3, [pc, #356]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000896:	4858      	ldr	r0, [pc, #352]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 8000898:	f000 fa54 	bl	8000d44 <HAL_DMA_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80008a2:	f7ff fdf0 	bl	8000486 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a53      	ldr	r2, [pc, #332]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
 80008ac:	4a52      	ldr	r2, [pc, #328]	; (80009f8 <HAL_UART_MspInit+0x27c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2025      	movs	r0, #37	; 0x25
 80008b8:	f000 fa0d 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008bc:	2025      	movs	r0, #37	; 0x25
 80008be:	f000 fa26 	bl	8000d0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008c2:	e089      	b.n	80009d8 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <HAL_UART_MspInit+0x284>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f040 8084 	bne.w	80009d8 <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a3d      	ldr	r2, [pc, #244]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <HAL_UART_MspInit+0x268>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000900:	2304      	movs	r3, #4
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	483c      	ldr	r0, [pc, #240]	; (8000a04 <HAL_UART_MspInit+0x288>)
 8000914:	f000 fcb4 	bl	8001280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000918:	2308      	movs	r3, #8
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4836      	ldr	r0, [pc, #216]	; (8000a04 <HAL_UART_MspInit+0x288>)
 800092c:	f000 fca8 	bl	8001280 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000930:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000932:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <HAL_UART_MspInit+0x290>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000960:	4829      	ldr	r0, [pc, #164]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000962:	f000 f9ef 	bl	8000d44 <HAL_DMA_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800096c:	f7ff fd8b 	bl	8000486 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <HAL_UART_MspInit+0x28c>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_UART_MspInit+0x294>)
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <HAL_UART_MspInit+0x298>)
 8000980:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <HAL_UART_MspInit+0x294>)
 8000984:	2210      	movs	r2, #16
 8000986:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_UART_MspInit+0x294>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_UART_MspInit+0x294>)
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <HAL_UART_MspInit+0x294>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_UART_MspInit+0x294>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_UART_MspInit+0x294>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_UART_MspInit+0x294>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009ac:	4818      	ldr	r0, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x294>)
 80009ae:	f000 f9c9 	bl	8000d44 <HAL_DMA_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x240>
      Error_Handler();
 80009b8:	f7ff fd65 	bl	8000486 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <HAL_UART_MspInit+0x294>)
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <HAL_UART_MspInit+0x294>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2026      	movs	r0, #38	; 0x26
 80009ce:	f000 f982 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009d2:	2026      	movs	r0, #38	; 0x26
 80009d4:	f000 f99b 	bl	8000d0e <HAL_NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	; 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40013800 	.word	0x40013800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	40010000 	.word	0x40010000
 80009f0:	20000140 	.word	0x20000140
 80009f4:	40020058 	.word	0x40020058
 80009f8:	200000fc 	.word	0x200000fc
 80009fc:	40020044 	.word	0x40020044
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40010800 	.word	0x40010800
 8000a08:	200000b8 	.word	0x200000b8
 8000a0c:	4002006c 	.word	0x4002006c
 8000a10:	20000184 	.word	0x20000184
 8000a14:	40020080 	.word	0x40020080

08000a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3e:	f7ff fe43 	bl	80006c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 f819 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fcb3 	bl	80003b0 <main>
  bx lr
 8000a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000a54:	08002ca4 	.word	0x08002ca4
  ldr r2, =_sbss
 8000a58:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000a5c:	20000264 	.word	0x20000264

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f923 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fd2c 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f93b 	bl	8000d2a <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	f000 f903 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000018 	.word	0x20000018
 8000ae8:	20000020 	.word	0x20000020
 8000aec:	2000001c 	.word	0x2000001c

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000020 	.word	0x20000020
 8000b10:	20000250 	.word	0x20000250

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000250 	.word	0x20000250

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <__NVIC_EnableIRQ+0x34>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	f7ff ff90 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff2d 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff42 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff90 	bl	8000c18 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5f 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff35 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e043      	b.n	8000de2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <HAL_DMA_Init+0xa8>)
 8000d62:	4413      	add	r3, r2
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <HAL_DMA_Init+0xac>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	009a      	lsls	r2, r3, #2
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_DMA_Init+0xb0>)
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	bffdfff8 	.word	0xbffdfff8
 8000df0:	cccccccd 	.word	0xcccccccd
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_DMA_Start_IT+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e04a      	b.n	8000eae <HAL_DMA_Start_IT+0xb6>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d13a      	bne.n	8000ea0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f9e8 	bl	8001224 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 020e 	orr.w	r2, r2, #14
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e00f      	b.n	8000e8e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0204 	bic.w	r2, r2, #4
 8000e7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 020a 	orr.w	r2, r2, #10
 8000e8c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0201 	orr.w	r2, r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e005      	b.n	8000eac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d008      	beq.n	8000ede <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e020      	b.n	8000f20 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e051      	b.n	8000ff2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 020e 	bic.w	r2, r2, #14
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_DMA_Abort_IT+0xd0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d029      	beq.n	8000fcc <HAL_DMA_Abort_IT+0xa0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a20      	ldr	r2, [pc, #128]	; (8001000 <HAL_DMA_Abort_IT+0xd4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d022      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x9c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <HAL_DMA_Abort_IT+0xd8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d01a      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x96>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_DMA_Abort_IT+0xdc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d012      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x90>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_DMA_Abort_IT+0xe0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00a      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x8a>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_DMA_Abort_IT+0xe4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d102      	bne.n	8000fb0 <HAL_DMA_Abort_IT+0x84>
 8000faa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fae:	e00e      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb4:	e00b      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fba:	e008      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	e005      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	e002      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fc8:	2310      	movs	r3, #16
 8000fca:	e000      	b.n	8000fce <HAL_DMA_Abort_IT+0xa2>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <HAL_DMA_Abort_IT+0xe8>)
 8000fd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
    } 
  }
  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020008 	.word	0x40020008
 8001000:	4002001c 	.word	0x4002001c
 8001004:	40020030 	.word	0x40020030
 8001008:	40020044 	.word	0x40020044
 800100c:	40020058 	.word	0x40020058
 8001010:	4002006c 	.word	0x4002006c
 8001014:	40020000 	.word	0x40020000

08001018 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	2204      	movs	r2, #4
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d04f      	beq.n	80010e0 <HAL_DMA_IRQHandler+0xc8>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	2b00      	cmp	r3, #0
 8001048:	d04a      	beq.n	80010e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0320 	and.w	r3, r3, #32
 8001054:	2b00      	cmp	r3, #0
 8001056:	d107      	bne.n	8001068 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a66      	ldr	r2, [pc, #408]	; (8001208 <HAL_DMA_IRQHandler+0x1f0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d029      	beq.n	80010c6 <HAL_DMA_IRQHandler+0xae>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a65      	ldr	r2, [pc, #404]	; (800120c <HAL_DMA_IRQHandler+0x1f4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d022      	beq.n	80010c2 <HAL_DMA_IRQHandler+0xaa>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a63      	ldr	r2, [pc, #396]	; (8001210 <HAL_DMA_IRQHandler+0x1f8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01a      	beq.n	80010bc <HAL_DMA_IRQHandler+0xa4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a62      	ldr	r2, [pc, #392]	; (8001214 <HAL_DMA_IRQHandler+0x1fc>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d012      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x9e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <HAL_DMA_IRQHandler+0x200>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00a      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x98>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_DMA_IRQHandler+0x204>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d102      	bne.n	80010aa <HAL_DMA_IRQHandler+0x92>
 80010a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a8:	e00e      	b.n	80010c8 <HAL_DMA_IRQHandler+0xb0>
 80010aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ae:	e00b      	b.n	80010c8 <HAL_DMA_IRQHandler+0xb0>
 80010b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010b4:	e008      	b.n	80010c8 <HAL_DMA_IRQHandler+0xb0>
 80010b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ba:	e005      	b.n	80010c8 <HAL_DMA_IRQHandler+0xb0>
 80010bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c0:	e002      	b.n	80010c8 <HAL_DMA_IRQHandler+0xb0>
 80010c2:	2340      	movs	r3, #64	; 0x40
 80010c4:	e000      	b.n	80010c8 <HAL_DMA_IRQHandler+0xb0>
 80010c6:	2304      	movs	r3, #4
 80010c8:	4a55      	ldr	r2, [pc, #340]	; (8001220 <HAL_DMA_IRQHandler+0x208>)
 80010ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 8094 	beq.w	80011fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010de:	e08e      	b.n	80011fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	2202      	movs	r2, #2
 80010e6:	409a      	lsls	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d056      	beq.n	800119e <HAL_DMA_IRQHandler+0x186>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d051      	beq.n	800119e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10b      	bne.n	8001120 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 020a 	bic.w	r2, r2, #10
 8001116:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a38      	ldr	r2, [pc, #224]	; (8001208 <HAL_DMA_IRQHandler+0x1f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d029      	beq.n	800117e <HAL_DMA_IRQHandler+0x166>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a37      	ldr	r2, [pc, #220]	; (800120c <HAL_DMA_IRQHandler+0x1f4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d022      	beq.n	800117a <HAL_DMA_IRQHandler+0x162>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a35      	ldr	r2, [pc, #212]	; (8001210 <HAL_DMA_IRQHandler+0x1f8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01a      	beq.n	8001174 <HAL_DMA_IRQHandler+0x15c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a34      	ldr	r2, [pc, #208]	; (8001214 <HAL_DMA_IRQHandler+0x1fc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d012      	beq.n	800116e <HAL_DMA_IRQHandler+0x156>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_DMA_IRQHandler+0x200>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00a      	beq.n	8001168 <HAL_DMA_IRQHandler+0x150>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_DMA_IRQHandler+0x204>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d102      	bne.n	8001162 <HAL_DMA_IRQHandler+0x14a>
 800115c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001160:	e00e      	b.n	8001180 <HAL_DMA_IRQHandler+0x168>
 8001162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001166:	e00b      	b.n	8001180 <HAL_DMA_IRQHandler+0x168>
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	e008      	b.n	8001180 <HAL_DMA_IRQHandler+0x168>
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	e005      	b.n	8001180 <HAL_DMA_IRQHandler+0x168>
 8001174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001178:	e002      	b.n	8001180 <HAL_DMA_IRQHandler+0x168>
 800117a:	2320      	movs	r3, #32
 800117c:	e000      	b.n	8001180 <HAL_DMA_IRQHandler+0x168>
 800117e:	2302      	movs	r3, #2
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <HAL_DMA_IRQHandler+0x208>)
 8001182:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	2b00      	cmp	r3, #0
 8001192:	d034      	beq.n	80011fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800119c:	e02f      	b.n	80011fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2208      	movs	r2, #8
 80011a4:	409a      	lsls	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d028      	beq.n	8001200 <HAL_DMA_IRQHandler+0x1e8>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d023      	beq.n	8001200 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 020e 	bic.w	r2, r2, #14
 80011c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
    }
  }
  return;
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
}
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020008 	.word	0x40020008
 800120c:	4002001c 	.word	0x4002001c
 8001210:	40020030 	.word	0x40020030
 8001214:	40020044 	.word	0x40020044
 8001218:	40020058 	.word	0x40020058
 800121c:	4002006c 	.word	0x4002006c
 8001220:	40020000 	.word	0x40020000

08001224 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b10      	cmp	r3, #16
 8001250:	d108      	bne.n	8001264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001262:	e007      	b.n	8001274 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	60da      	str	r2, [r3, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e169      	b.n	8001568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001294:	2201      	movs	r2, #1
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 8158 	bne.w	8001562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a9a      	ldr	r2, [pc, #616]	; (8001520 <HAL_GPIO_Init+0x2a0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d05e      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012bc:	4a98      	ldr	r2, [pc, #608]	; (8001520 <HAL_GPIO_Init+0x2a0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d875      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012c2:	4a98      	ldr	r2, [pc, #608]	; (8001524 <HAL_GPIO_Init+0x2a4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d058      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012c8:	4a96      	ldr	r2, [pc, #600]	; (8001524 <HAL_GPIO_Init+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d86f      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012ce:	4a96      	ldr	r2, [pc, #600]	; (8001528 <HAL_GPIO_Init+0x2a8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d052      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012d4:	4a94      	ldr	r2, [pc, #592]	; (8001528 <HAL_GPIO_Init+0x2a8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d869      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012da:	4a94      	ldr	r2, [pc, #592]	; (800152c <HAL_GPIO_Init+0x2ac>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d04c      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012e0:	4a92      	ldr	r2, [pc, #584]	; (800152c <HAL_GPIO_Init+0x2ac>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d863      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012e6:	4a92      	ldr	r2, [pc, #584]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d046      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012ec:	4a90      	ldr	r2, [pc, #576]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d85d      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d82a      	bhi.n	800134c <HAL_GPIO_Init+0xcc>
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d859      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012fa:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <HAL_GPIO_Init+0x80>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	0800137b 	.word	0x0800137b
 8001304:	08001355 	.word	0x08001355
 8001308:	08001367 	.word	0x08001367
 800130c:	080013a9 	.word	0x080013a9
 8001310:	080013af 	.word	0x080013af
 8001314:	080013af 	.word	0x080013af
 8001318:	080013af 	.word	0x080013af
 800131c:	080013af 	.word	0x080013af
 8001320:	080013af 	.word	0x080013af
 8001324:	080013af 	.word	0x080013af
 8001328:	080013af 	.word	0x080013af
 800132c:	080013af 	.word	0x080013af
 8001330:	080013af 	.word	0x080013af
 8001334:	080013af 	.word	0x080013af
 8001338:	080013af 	.word	0x080013af
 800133c:	080013af 	.word	0x080013af
 8001340:	080013af 	.word	0x080013af
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001371 	.word	0x08001371
 800134c:	4a79      	ldr	r2, [pc, #484]	; (8001534 <HAL_GPIO_Init+0x2b4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001352:	e02c      	b.n	80013ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e029      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	3304      	adds	r3, #4
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e024      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	3308      	adds	r3, #8
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e01f      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	330c      	adds	r3, #12
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e01a      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001382:	2304      	movs	r3, #4
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e013      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001390:	2308      	movs	r3, #8
 8001392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	611a      	str	r2, [r3, #16]
          break;
 800139a:	e009      	b.n	80013b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	615a      	str	r2, [r3, #20]
          break;
 80013a6:	e003      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          break;
 80013ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2bff      	cmp	r3, #255	; 0xff
 80013b4:	d801      	bhi.n	80013ba <HAL_GPIO_Init+0x13a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_Init+0x13e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2bff      	cmp	r3, #255	; 0xff
 80013c4:	d802      	bhi.n	80013cc <HAL_GPIO_Init+0x14c>
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x152>
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	3b08      	subs	r3, #8
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	210f      	movs	r1, #15
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	6a39      	ldr	r1, [r7, #32]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	431a      	orrs	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80b1 	beq.w	8001562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x2b8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_GPIO_Init+0x2b8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x2b8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2bc>)
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a40      	ldr	r2, [pc, #256]	; (8001540 <HAL_GPIO_Init+0x2c0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x1ec>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <HAL_GPIO_Init+0x2c4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1e8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3e      	ldr	r2, [pc, #248]	; (8001548 <HAL_GPIO_Init+0x2c8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1e4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3d      	ldr	r2, [pc, #244]	; (800154c <HAL_GPIO_Init+0x2cc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1e0>
 800145c:	2303      	movs	r3, #3
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001460:	2304      	movs	r3, #4
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 800146c:	2300      	movs	r3, #0
 800146e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147e:	492f      	ldr	r1, [pc, #188]	; (800153c <HAL_GPIO_Init+0x2bc>)
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	492c      	ldr	r1, [pc, #176]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4928      	ldr	r1, [pc, #160]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	491e      	ldr	r1, [pc, #120]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4918      	ldr	r1, [pc, #96]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4914      	ldr	r1, [pc, #80]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d021      	beq.n	8001554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	490e      	ldr	r1, [pc, #56]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
 800151c:	e021      	b.n	8001562 <HAL_GPIO_Init+0x2e2>
 800151e:	bf00      	nop
 8001520:	10320000 	.word	0x10320000
 8001524:	10310000 	.word	0x10310000
 8001528:	10220000 	.word	0x10220000
 800152c:	10210000 	.word	0x10210000
 8001530:	10120000 	.word	0x10120000
 8001534:	10110000 	.word	0x10110000
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000
 8001540:	40010800 	.word	0x40010800
 8001544:	40010c00 	.word	0x40010c00
 8001548:	40011000 	.word	0x40011000
 800154c:	40011400 	.word	0x40011400
 8001550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	43db      	mvns	r3, r3
 800155c:	4909      	ldr	r1, [pc, #36]	; (8001584 <HAL_GPIO_Init+0x304>)
 800155e:	4013      	ands	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	3301      	adds	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f ae8e 	bne.w	8001294 <HAL_GPIO_Init+0x14>
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	372c      	adds	r7, #44	; 0x2c
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	611a      	str	r2, [r3, #16]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f806 	bl	80015e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e26c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8087 	beq.w	800172a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00c      	beq.n	8001642 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001628:	4b8f      	ldr	r3, [pc, #572]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d112      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
 8001634:	4b8c      	ldr	r3, [pc, #560]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d10b      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	4b89      	ldr	r3, [pc, #548]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d06c      	beq.n	8001728 <HAL_RCC_OscConfig+0x12c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d168      	bne.n	8001728 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e246      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x76>
 8001664:	4b80      	ldr	r3, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e02e      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x98>
 800167a:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b78      	ldr	r3, [pc, #480]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a77      	ldr	r2, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0xbc>
 800169e:	4b72      	ldr	r3, [pc, #456]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a71      	ldr	r2, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6e      	ldr	r2, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 80016b8:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a67      	ldr	r2, [pc, #412]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fa1c 	bl	8000b14 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fa18 	bl	8000b14 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1fa      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe4>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fa08 	bl	8000b14 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fa04 	bl	8000b14 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1e6      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x10c>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001736:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001742:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x18c>
 800174e:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1ba      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4939      	ldr	r1, [pc, #228]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff f9bd 	bl	8000b14 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff f9b9 	bl	8000b14 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e19b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4927      	ldr	r1, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff f99c 	bl	8000b14 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff f998 	bl	8000b14 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e17a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03a      	beq.n	8001880 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d019      	beq.n	8001846 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f97c 	bl	8000b14 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f978 	bl	8000b14 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e15a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f000 fad8 	bl	8001df4 <RCC_Delay>
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff f962 	bl	8000b14 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001852:	e00f      	b.n	8001874 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff f95e 	bl	8000b14 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d908      	bls.n	8001874 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e140      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	42420000 	.word	0x42420000
 8001870:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e9      	bne.n	8001854 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a6 	beq.w	80019da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b97      	ldr	r3, [pc, #604]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b94      	ldr	r3, [pc, #592]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a93      	ldr	r2, [pc, #588]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b8e      	ldr	r3, [pc, #568]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b8b      	ldr	r3, [pc, #556]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a8a      	ldr	r2, [pc, #552]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff f91f 	bl	8000b14 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff f91b 	bl	8000b14 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0fd      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x312>
 8001900:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a7a      	ldr	r2, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e02d      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x334>
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x356>
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a6c      	ldr	r2, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a66      	ldr	r2, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f8cf 	bl	8000b14 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f8cb 	bl	8000b14 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0ab      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCC_OscConfig+0x37e>
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff f8b9 	bl	8000b14 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f8b5 	bl	8000b14 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e095      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a47      	ldr	r2, [pc, #284]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8081 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d061      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d146      	bne.n	8001a86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_OscConfig+0x4fc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f889 	bl	8000b14 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff f885 	bl	8000b14 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e067      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	492d      	ldr	r1, [pc, #180]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a19      	ldr	r1, [r3, #32]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	430b      	orrs	r3, r1
 8001a52:	4927      	ldr	r1, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x4fc>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f859 	bl	8000b14 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f855 	bl	8000b14 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e037      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46a>
 8001a84:	e02f      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_RCC_OscConfig+0x4fc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f842 	bl	8000b14 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f83e 	bl	8000b14 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e020      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x498>
 8001ab2:	e018      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e013      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42420060 	.word	0x42420060

08001afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0d0      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4965      	ldr	r1, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d040      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e073      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4936      	ldr	r1, [pc, #216]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7fe ff92 	bl	8000b14 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe ff8e 	bl	8000b14 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e053      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d210      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4922      	ldr	r1, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1d0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fef0 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08002c80 	.word	0x08002c80
 8001cc8:	20000018 	.word	0x20000018
 8001ccc:	2000001c 	.word	0x2000001c

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cd8:	1d3c      	adds	r4, r7, #4
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ce0:	f240 2301 	movw	r3, #513	; 0x201
 8001ce4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x46>
 8001d0e:	e02d      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d12:	623b      	str	r3, [r7, #32]
      break;
 8001d14:	e02d      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d22:	4413      	add	r3, r2
 8001d24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c5b      	lsrs	r3, r3, #17
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d42:	4413      	add	r3, r2
 8001d44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4e:	fb02 f203 	mul.w	r2, r2, r3
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	e004      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	623b      	str	r3, [r7, #32]
      break;
 8001d6a:	e002      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6e:	623b      	str	r3, [r7, #32]
      break;
 8001d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d72:	6a3b      	ldr	r3, [r7, #32]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc90      	pop	{r4, r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	08002c70 	.word	0x08002c70
 8001d84:	40021000 	.word	0x40021000
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	003d0900 	.word	0x003d0900

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000018 	.word	0x20000018

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da8:	f7ff fff2 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08002c90 	.word	0x08002c90

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08002c90 	.word	0x08002c90

08001df4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <RCC_Delay+0x34>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <RCC_Delay+0x38>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0a5b      	lsrs	r3, r3, #9
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e10:	bf00      	nop
  }
  while (Delay --);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	60fa      	str	r2, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f9      	bne.n	8001e10 <RCC_Delay+0x1c>
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000018 	.word	0x20000018
 8001e2c:	10624dd3 	.word	0x10624dd3

08001e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e03f      	b.n	8001ec2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fc90 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	; 0x24
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fd47 	bl	8002908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d153      	bne.n	8001f8e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_UART_Transmit_DMA+0x26>
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e04c      	b.n	8001f90 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_UART_Transmit_DMA+0x38>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e045      	b.n	8001f90 <HAL_UART_Transmit_DMA+0xc4>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2221      	movs	r2, #33	; 0x21
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_UART_Transmit_DMA+0xcc>)
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_UART_Transmit_DMA+0xd0>)
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_UART_Transmit_DMA+0xd4>)
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	2200      	movs	r2, #0
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	461a      	mov	r2, r3
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f7fe ff48 	bl	8000df8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f70:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f88:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
  }
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	080023a5 	.word	0x080023a5
 8001f9c:	080023f7 	.word	0x080023f7
 8001fa0:	080024df 	.word	0x080024df

08001fa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d11d      	bne.n	8001ffa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_UART_Receive_DMA+0x26>
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e016      	b.n	8001ffc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_UART_Receive_DMA+0x38>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e00f      	b.n	8001ffc <HAL_UART_Receive_DMA+0x58>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fabf 	bl	8002574 <UART_Start_Receive_DMA>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	e000      	b.n	8001ffc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
  }
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_UART_IRQHandler+0x52>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fbb0 	bl	80027b4 <UART_Receive_IT>
      return;
 8002054:	e17b      	b.n	800234e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80b1 	beq.w	80021c0 <HAL_UART_IRQHandler+0x1bc>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_UART_IRQHandler+0x70>
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80a6 	beq.w	80021c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_UART_IRQHandler+0x90>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_UART_IRQHandler+0xb0>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0202 	orr.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_UART_IRQHandler+0xd0>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f043 0204 	orr.w	r2, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00f      	beq.n	80020fe <HAL_UART_IRQHandler+0xfa>
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <HAL_UART_IRQHandler+0xee>
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f043 0208 	orr.w	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 811e 	beq.w	8002344 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_UART_IRQHandler+0x11e>
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fb49 	bl	80027b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <HAL_UART_IRQHandler+0x146>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d031      	beq.n	80021ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa8b 	bl	8002666 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	2b00      	cmp	r3, #0
 8002174:	d013      	beq.n	800219e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	4a76      	ldr	r2, [pc, #472]	; (8002354 <HAL_UART_IRQHandler+0x350>)
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fed2 	bl	8000f2c <HAL_DMA_Abort_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002198:	4610      	mov	r0, r2
 800219a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219c:	e00e      	b.n	80021bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8ec 	bl	800237c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a4:	e00a      	b.n	80021bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8e8 	bl	800237c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ac:	e006      	b.n	80021bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8e4 	bl	800237c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80021ba:	e0c3      	b.n	8002344 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021bc:	bf00      	nop
    return;
 80021be:	e0c1      	b.n	8002344 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 80a1 	bne.w	800230c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 809b 	beq.w	800230c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8095 	beq.w	800230c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04e      	beq.n	80022a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002210:	8a3b      	ldrh	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8098 	beq.w	8002348 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800221c:	8a3a      	ldrh	r2, [r7, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	f080 8092 	bcs.w	8002348 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8a3a      	ldrh	r2, [r7, #16]
 8002228:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b20      	cmp	r3, #32
 8002232:	d02b      	beq.n	800228c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002242:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0210 	bic.w	r2, r2, #16
 8002280:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fe15 	bl	8000eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f876 	bl	800238e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80022a2:	e051      	b.n	8002348 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d047      	beq.n	800234c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d044      	beq.n	800234c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002300:	8a7b      	ldrh	r3, [r7, #18]
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f842 	bl	800238e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800230a:	e01f      	b.n	800234c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_UART_IRQHandler+0x324>
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9e0 	bl	80026e6 <UART_Transmit_IT>
    return;
 8002326:	e012      	b.n	800234e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <HAL_UART_IRQHandler+0x34a>
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fa21 	bl	8002784 <UART_EndTransmit_IT>
    return;
 8002342:	e004      	b.n	800234e <HAL_UART_IRQHandler+0x34a>
    return;
 8002344:	bf00      	nop
 8002346:	e002      	b.n	800234e <HAL_UART_IRQHandler+0x34a>
      return;
 8002348:	bf00      	nop
 800234a:	e000      	b.n	800234e <HAL_UART_IRQHandler+0x34a>
      return;
 800234c:	bf00      	nop
  }
}
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	080026bf 	.word	0x080026bf

08002358 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d113      	bne.n	80023e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80023e6:	e002      	b.n	80023ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7fd ffbd 	bl	8000368 <HAL_UART_TxCpltCallback>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff ffa7 	bl	8002358 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b00      	cmp	r3, #0
 800242c:	d12a      	bne.n	8002484 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002442:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002462:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0210 	bic.w	r2, r2, #16
 8002482:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002490:	4619      	mov	r1, r3
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff ff7b 	bl	800238e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002498:	e002      	b.n	80024a0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7fd ff76 	bl	800038c <HAL_UART_RxCpltCallback>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff ff60 	bl	800238e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024ce:	e002      	b.n	80024d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff4a 	bl	800236a <HAL_UART_RxHalfCpltCallback>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b21      	cmp	r3, #33	; 0x21
 8002510:	d108      	bne.n	8002524 <UART_DMAError+0x46>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800251e:	68b8      	ldr	r0, [r7, #8]
 8002520:	f000 f88c 	bl	800263c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b22      	cmp	r3, #34	; 0x22
 8002544:	d108      	bne.n	8002558 <UART_DMAError+0x7a>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002552:	68b8      	ldr	r0, [r7, #8]
 8002554:	f000 f887 	bl	8002666 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0210 	orr.w	r2, r3, #16
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002564:	68b8      	ldr	r0, [r7, #8]
 8002566:	f7ff ff09 	bl	800237c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2222      	movs	r2, #34	; 0x22
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <UART_Start_Receive_DMA+0xbc>)
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	4a22      	ldr	r2, [pc, #136]	; (8002634 <UART_Start_Receive_DMA+0xc0>)
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <UART_Start_Receive_DMA+0xc4>)
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80025bc:	f107 0308 	add.w	r3, r7, #8
 80025c0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	f7fe fc10 	bl	8000df8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002624:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	08002413 	.word	0x08002413
 8002634:	080024a9 	.word	0x080024a9
 8002638:	080024df 	.word	0x080024df

0800263c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002652:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800267c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0210 	bic.w	r2, r2, #16
 80026a4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fe4f 	bl	800237c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b21      	cmp	r3, #33	; 0x21
 80026f8:	d13e      	bne.n	8002778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d114      	bne.n	800272e <UART_Transmit_IT+0x48>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d110      	bne.n	800272e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	e008      	b.n	8002740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6211      	str	r1, [r2, #32]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fd fddf 	bl	8000368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b22      	cmp	r3, #34	; 0x22
 80027c6:	f040 8099 	bne.w	80028fc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d2:	d117      	bne.n	8002804 <UART_Receive_IT+0x50>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d113      	bne.n	8002804 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
 8002802:	e026      	b.n	8002852 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d007      	beq.n	8002828 <UART_Receive_IT+0x74>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <UART_Receive_IT+0x82>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d106      	bne.n	8002836 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e008      	b.n	8002848 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002842:	b2da      	uxtb	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29b      	uxth	r3, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4619      	mov	r1, r3
 8002860:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002862:	2b00      	cmp	r3, #0
 8002864:	d148      	bne.n	80028f8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0220 	bic.w	r2, r2, #32
 8002874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d123      	bne.n	80028ee <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0210 	bic.w	r2, r2, #16
 80028ba:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d10a      	bne.n	80028e0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fd51 	bl	800238e <HAL_UARTEx_RxEventCallback>
 80028ec:	e002      	b.n	80028f4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd fd4c 	bl	800038c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e002      	b.n	80028fe <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80028fc:	2302      	movs	r3, #2
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002942:	f023 030c 	bic.w	r3, r3, #12
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	430b      	orrs	r3, r1
 800294e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <UART_SetConfig+0x114>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff fa2c 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	e002      	b.n	800297e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002978:	f7ff fa14 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <UART_SetConfig+0x118>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	0119      	lsls	r1, r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <UART_SetConfig+0x118>)
 80029b6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	3332      	adds	r3, #50	; 0x32
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <UART_SetConfig+0x118>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d4:	4419      	add	r1, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <UART_SetConfig+0x118>)
 80029ee:	fba3 0302 	umull	r0, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2064      	movs	r0, #100	; 0x64
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <UART_SetConfig+0x118>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	440a      	add	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	51eb851f 	.word	0x51eb851f

08002a24 <_Znwj>:
 8002a24:	2801      	cmp	r0, #1
 8002a26:	bf38      	it	cc
 8002a28:	2001      	movcc	r0, #1
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f000 f846 	bl	8002ac0 <malloc>
 8002a34:	b930      	cbnz	r0, 8002a44 <_Znwj+0x20>
 8002a36:	f000 f809 	bl	8002a4c <_ZSt15get_new_handlerv>
 8002a3a:	b908      	cbnz	r0, 8002a40 <_Znwj+0x1c>
 8002a3c:	f000 f80e 	bl	8002a5c <abort>
 8002a40:	4780      	blx	r0
 8002a42:	e7f4      	b.n	8002a2e <_Znwj+0xa>
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <_Znaj>:
 8002a46:	f7ff bfed 	b.w	8002a24 <_Znwj>
	...

08002a4c <_ZSt15get_new_handlerv>:
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <_ZSt15get_new_handlerv+0xc>)
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	f3bf 8f5b 	dmb	ish
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	200000ac 	.word	0x200000ac

08002a5c <abort>:
 8002a5c:	2006      	movs	r0, #6
 8002a5e:	b508      	push	{r3, lr}
 8002a60:	f000 f8d0 	bl	8002c04 <raise>
 8002a64:	2001      	movs	r0, #1
 8002a66:	f7fd fdee 	bl	8000646 <_exit>
	...

08002a6c <__errno>:
 8002a6c:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <__errno+0x8>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000024 	.word	0x20000024

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	4d0c      	ldr	r5, [pc, #48]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7e:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	f000 f8e6 	bl	8002c58 <_init>
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	4d0a      	ldr	r5, [pc, #40]	; (8002ab8 <__libc_init_array+0x40>)
 8002a90:	4c0a      	ldr	r4, [pc, #40]	; (8002abc <__libc_init_array+0x44>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08002c98 	.word	0x08002c98
 8002ab4:	08002c98 	.word	0x08002c98
 8002ab8:	08002c98 	.word	0x08002c98
 8002abc:	08002ca0 	.word	0x08002ca0

08002ac0 <malloc>:
 8002ac0:	4b02      	ldr	r3, [pc, #8]	; (8002acc <malloc+0xc>)
 8002ac2:	4601      	mov	r1, r0
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	f000 b80b 	b.w	8002ae0 <_malloc_r>
 8002aca:	bf00      	nop
 8002acc:	20000024 	.word	0x20000024

08002ad0 <memset>:
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4402      	add	r2, r0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d100      	bne.n	8002ada <memset+0xa>
 8002ad8:	4770      	bx	lr
 8002ada:	f803 1b01 	strb.w	r1, [r3], #1
 8002ade:	e7f9      	b.n	8002ad4 <memset+0x4>

08002ae0 <_malloc_r>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	1ccd      	adds	r5, r1, #3
 8002ae4:	f025 0503 	bic.w	r5, r5, #3
 8002ae8:	3508      	adds	r5, #8
 8002aea:	2d0c      	cmp	r5, #12
 8002aec:	bf38      	it	cc
 8002aee:	250c      	movcc	r5, #12
 8002af0:	2d00      	cmp	r5, #0
 8002af2:	4606      	mov	r6, r0
 8002af4:	db01      	blt.n	8002afa <_malloc_r+0x1a>
 8002af6:	42a9      	cmp	r1, r5
 8002af8:	d903      	bls.n	8002b02 <_malloc_r+0x22>
 8002afa:	230c      	movs	r3, #12
 8002afc:	6033      	str	r3, [r6, #0]
 8002afe:	2000      	movs	r0, #0
 8002b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b02:	f000 f89b 	bl	8002c3c <__malloc_lock>
 8002b06:	4921      	ldr	r1, [pc, #132]	; (8002b8c <_malloc_r+0xac>)
 8002b08:	680a      	ldr	r2, [r1, #0]
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	b99c      	cbnz	r4, 8002b36 <_malloc_r+0x56>
 8002b0e:	4f20      	ldr	r7, [pc, #128]	; (8002b90 <_malloc_r+0xb0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b923      	cbnz	r3, 8002b1e <_malloc_r+0x3e>
 8002b14:	4621      	mov	r1, r4
 8002b16:	4630      	mov	r0, r6
 8002b18:	f000 f83c 	bl	8002b94 <_sbrk_r>
 8002b1c:	6038      	str	r0, [r7, #0]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4630      	mov	r0, r6
 8002b22:	f000 f837 	bl	8002b94 <_sbrk_r>
 8002b26:	1c43      	adds	r3, r0, #1
 8002b28:	d123      	bne.n	8002b72 <_malloc_r+0x92>
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	6033      	str	r3, [r6, #0]
 8002b30:	f000 f88a 	bl	8002c48 <__malloc_unlock>
 8002b34:	e7e3      	b.n	8002afe <_malloc_r+0x1e>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	1b5b      	subs	r3, r3, r5
 8002b3a:	d417      	bmi.n	8002b6c <_malloc_r+0x8c>
 8002b3c:	2b0b      	cmp	r3, #11
 8002b3e:	d903      	bls.n	8002b48 <_malloc_r+0x68>
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	441c      	add	r4, r3
 8002b44:	6025      	str	r5, [r4, #0]
 8002b46:	e004      	b.n	8002b52 <_malloc_r+0x72>
 8002b48:	6863      	ldr	r3, [r4, #4]
 8002b4a:	42a2      	cmp	r2, r4
 8002b4c:	bf0c      	ite	eq
 8002b4e:	600b      	streq	r3, [r1, #0]
 8002b50:	6053      	strne	r3, [r2, #4]
 8002b52:	4630      	mov	r0, r6
 8002b54:	f000 f878 	bl	8002c48 <__malloc_unlock>
 8002b58:	f104 000b 	add.w	r0, r4, #11
 8002b5c:	1d23      	adds	r3, r4, #4
 8002b5e:	f020 0007 	bic.w	r0, r0, #7
 8002b62:	1ac2      	subs	r2, r0, r3
 8002b64:	d0cc      	beq.n	8002b00 <_malloc_r+0x20>
 8002b66:	1a1b      	subs	r3, r3, r0
 8002b68:	50a3      	str	r3, [r4, r2]
 8002b6a:	e7c9      	b.n	8002b00 <_malloc_r+0x20>
 8002b6c:	4622      	mov	r2, r4
 8002b6e:	6864      	ldr	r4, [r4, #4]
 8002b70:	e7cc      	b.n	8002b0c <_malloc_r+0x2c>
 8002b72:	1cc4      	adds	r4, r0, #3
 8002b74:	f024 0403 	bic.w	r4, r4, #3
 8002b78:	42a0      	cmp	r0, r4
 8002b7a:	d0e3      	beq.n	8002b44 <_malloc_r+0x64>
 8002b7c:	1a21      	subs	r1, r4, r0
 8002b7e:	4630      	mov	r0, r6
 8002b80:	f000 f808 	bl	8002b94 <_sbrk_r>
 8002b84:	3001      	adds	r0, #1
 8002b86:	d1dd      	bne.n	8002b44 <_malloc_r+0x64>
 8002b88:	e7cf      	b.n	8002b2a <_malloc_r+0x4a>
 8002b8a:	bf00      	nop
 8002b8c:	200000b0 	.word	0x200000b0
 8002b90:	200000b4 	.word	0x200000b4

08002b94 <_sbrk_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	2300      	movs	r3, #0
 8002b98:	4d05      	ldr	r5, [pc, #20]	; (8002bb0 <_sbrk_r+0x1c>)
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	602b      	str	r3, [r5, #0]
 8002ba0:	f7fd fd5c 	bl	800065c <_sbrk>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d102      	bne.n	8002bae <_sbrk_r+0x1a>
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	b103      	cbz	r3, 8002bae <_sbrk_r+0x1a>
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
 8002bb0:	20000254 	.word	0x20000254

08002bb4 <_raise_r>:
 8002bb4:	291f      	cmp	r1, #31
 8002bb6:	b538      	push	{r3, r4, r5, lr}
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460d      	mov	r5, r1
 8002bbc:	d904      	bls.n	8002bc8 <_raise_r+0x14>
 8002bbe:	2316      	movs	r3, #22
 8002bc0:	6003      	str	r3, [r0, #0]
 8002bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002bca:	b112      	cbz	r2, 8002bd2 <_raise_r+0x1e>
 8002bcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002bd0:	b94b      	cbnz	r3, 8002be6 <_raise_r+0x32>
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f000 f830 	bl	8002c38 <_getpid_r>
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4601      	mov	r1, r0
 8002bdc:	4620      	mov	r0, r4
 8002bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be2:	f000 b817 	b.w	8002c14 <_kill_r>
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d00a      	beq.n	8002c00 <_raise_r+0x4c>
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	d103      	bne.n	8002bf6 <_raise_r+0x42>
 8002bee:	2316      	movs	r3, #22
 8002bf0:	6003      	str	r3, [r0, #0]
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	e7e7      	b.n	8002bc6 <_raise_r+0x12>
 8002bf6:	2400      	movs	r4, #0
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002bfe:	4798      	blx	r3
 8002c00:	2000      	movs	r0, #0
 8002c02:	e7e0      	b.n	8002bc6 <_raise_r+0x12>

08002c04 <raise>:
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <raise+0xc>)
 8002c06:	4601      	mov	r1, r0
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	f7ff bfd3 	b.w	8002bb4 <_raise_r>
 8002c0e:	bf00      	nop
 8002c10:	20000024 	.word	0x20000024

08002c14 <_kill_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	2300      	movs	r3, #0
 8002c18:	4d06      	ldr	r5, [pc, #24]	; (8002c34 <_kill_r+0x20>)
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	602b      	str	r3, [r5, #0]
 8002c22:	f7fd fd00 	bl	8000626 <_kill>
 8002c26:	1c43      	adds	r3, r0, #1
 8002c28:	d102      	bne.n	8002c30 <_kill_r+0x1c>
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	b103      	cbz	r3, 8002c30 <_kill_r+0x1c>
 8002c2e:	6023      	str	r3, [r4, #0]
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
 8002c32:	bf00      	nop
 8002c34:	20000254 	.word	0x20000254

08002c38 <_getpid_r>:
 8002c38:	f7fd bcee 	b.w	8000618 <_getpid>

08002c3c <__malloc_lock>:
 8002c3c:	4801      	ldr	r0, [pc, #4]	; (8002c44 <__malloc_lock+0x8>)
 8002c3e:	f000 b809 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 8002c42:	bf00      	nop
 8002c44:	2000025c 	.word	0x2000025c

08002c48 <__malloc_unlock>:
 8002c48:	4801      	ldr	r0, [pc, #4]	; (8002c50 <__malloc_unlock+0x8>)
 8002c4a:	f000 b804 	b.w	8002c56 <__retarget_lock_release_recursive>
 8002c4e:	bf00      	nop
 8002c50:	2000025c 	.word	0x2000025c

08002c54 <__retarget_lock_acquire_recursive>:
 8002c54:	4770      	bx	lr

08002c56 <__retarget_lock_release_recursive>:
 8002c56:	4770      	bx	lr

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
